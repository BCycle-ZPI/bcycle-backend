// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bcycle_backend.Data;

namespace bcycle_backend.Migrations
{
    [DbContext(typeof(BCycleContext))]
    partial class BCycleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("bcycle_backend.Models.GroupTrip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HostID");

                    b.Property<string>("MapImageUrl");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TripCode");

                    b.HasKey("ID");

                    b.HasIndex("HostID");

                    b.ToTable("GroupTrip");
                });

            modelBuilder.Entity("bcycle_backend.Models.GroupTripParticipant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupTripID");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("GroupTripID");

                    b.HasIndex("UserID");

                    b.ToTable("GroupTripParticipant");
                });

            modelBuilder.Entity("bcycle_backend.Models.GroupTripPoint", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupTripID");

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.HasIndex("GroupTripID");

                    b.ToTable("GroupTripPoint");
                });

            modelBuilder.Entity("bcycle_backend.Models.Trip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Distance");

                    b.Property<DateTime>("Finished");

                    b.Property<int>("GroupTripID");

                    b.Property<string>("MapImageUrl");

                    b.Property<DateTime>("Started");

                    b.Property<int>("Time");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("GroupTripID");

                    b.HasIndex("UserID");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("bcycle_backend.Models.TripPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhotoUrl");

                    b.Property<int>("TripID");

                    b.HasKey("ID");

                    b.HasIndex("TripID");

                    b.ToTable("TripPhoto");
                });

            modelBuilder.Entity("bcycle_backend.Models.TripPoint", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<DateTime>("TimeReached");

                    b.Property<int>("TripID");

                    b.HasKey("ID");

                    b.HasIndex("TripID");

                    b.ToTable("TripPoint");
                });

            modelBuilder.Entity("bcycle_backend.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Surname");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("bcycle_backend.Models.GroupTrip", b =>
                {
                    b.HasOne("bcycle_backend.Models.User", "Host")
                        .WithMany("HostedGroupTrips")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bcycle_backend.Models.GroupTripParticipant", b =>
                {
                    b.HasOne("bcycle_backend.Models.GroupTrip", "GroupTrip")
                        .WithMany("Participants")
                        .HasForeignKey("GroupTripID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bcycle_backend.Models.User", "User")
                        .WithMany("GroupTripParticipations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bcycle_backend.Models.GroupTripPoint", b =>
                {
                    b.HasOne("bcycle_backend.Models.GroupTrip", "GroupTrip")
                        .WithMany("GroupTripPoints")
                        .HasForeignKey("GroupTripID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bcycle_backend.Models.Trip", b =>
                {
                    b.HasOne("bcycle_backend.Models.GroupTrip", "GroupTrip")
                        .WithMany()
                        .HasForeignKey("GroupTripID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bcycle_backend.Models.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bcycle_backend.Models.TripPhoto", b =>
                {
                    b.HasOne("bcycle_backend.Models.Trip", "Trip")
                        .WithMany("TripPhotos")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bcycle_backend.Models.TripPoint", b =>
                {
                    b.HasOne("bcycle_backend.Models.Trip", "Trip")
                        .WithMany("TripPoints")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
